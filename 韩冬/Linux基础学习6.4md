# 6.4学习总结

## 学习心得

学习中有时会遇到错误，开始时我很害怕遇到错误，后来发现只要细心耐心学习，遇到错误的地方记忆的更加牢固



## 学习笔记

### 正则表达式基础

> **正则表达式**，又称正规表示式、正规表示法、正规表达式、规则表达式、常规表示法（英语：Regular Expression，在代码中常简写为 regex、regexp 或 RE），计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列符合某个句法规则的字符串。在很多文本编辑器里，正则表达式通常被用来**检索、替换**那些符合某个模式的文本。

> 许多程序设计语言都支持利用正则表达式进行字符串操作。例如，在 Perl 中就内建了一个功能强大的正则表达式引擎。正则表达式这个概念最初是由 UNIX 中的工具软件（例如`sed`和`grep`）普及开的。正则表达式通常缩写成“regex”，单数有 regexp、regex，复数有 regexps、regexes、regexen。

一个正则表达式通常被称为一个模式（**pattern**），为用来描述或者匹配一系列符合某个句法规则的字符串

#### 选择

`|`竖直分隔符表示选择，例如"boy|girl"可以匹配"boy"或者"girl"

#### 数量限定

 

数量限定除了我们举例用的`*`,还有`+`加号,`?`问号,如果在一个模式中不加数量限定符则表示出现一次且仅出现一次：

 

- `+`表示前面的字符必须出现至少一次(1次或多次)，例如，"goo+gle",可以匹配"gooogle","goooogle"等；

- `?`表示前面的字符最多出现一次(0次或1次)，例如，"colou?r",可以匹配"color"或者"colour";

- `*`星号代表前面的字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次），例如，“0*42”可以匹配42、042、0042、00042等。

  #### 范围和优先级 

  `()`圆括号可以用来定义模式字符串的范围和优先级，这可以简单的理解为是否将括号内的模式串作为一个整体。例如，"gr(a|e)y"等价于"gray|grey"，（这里体现了优先级，竖直分隔符用于选择a或者e而不是gra和ey），"(grand)?father"匹配father和grandfather（这里体验了范围，`?`将圆括号内容作为一个整体匹配）。

  | 字符  | 描述                                                         |
  | :---- | :----------------------------------------------------------- |
  | \     | **将下一个字符标记为一个特殊字符、或一个原义字符。**例如，“n”匹配字符“n”。“\n”匹配一个换行符。序列“\\”匹配“\”而“\(”则匹配“(”。 |
  | ^     | **匹配输入字符串的开始位置。**                               |
  | $     | **匹配输入字符串的结束位置。**                               |
  | {n}   | n是一个非负整数。**匹配确定的n次**。例如，“o{2}”不能匹配“Bob”中的“o”，但是能匹配“food”中的两个o。 |
  | {n,}  | n是一个非负整数。**至少匹配n次**。例如，“o{2,}”不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有o。“o{1,}”等价于“o+”。“o{0,}”则等价于“o*”。 |
  | {n,m} | m和n均为非负整数，其中n<=m。**最少匹配n次且最多匹配m次。**例如，“o{1,3}”将匹配“fooooood”中的前三个o。“o{0,1}”等价于“o?”。请注意在逗号和两个数之间不能有空格。 |
  | *     | **匹配前面的子表达式零次或多次**。例如，zo*能匹配“z”、“zo”以及“zoo”。*等价于{0,}。 |
  | +     | **匹配前面的子表达式一次或多次**。例如，“zo+”能匹配“zo”以及“zoo”，但不能匹配“z”。+等价于{1,}。 |
  | ?     | **匹配前面的子表达式零次或一次**。例如，“do(es)?”可以匹配“do”或“does”中的“do”。?等价于{0,1}。 |
  | ?     | 当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“oooo”，“o+?”将匹配单个“o”， |

  ![img](https://doc.shiyanlou.com/linux_base/RegularExpression.png/wm) 

​         **grep模式匹配命令** 

  `grep`命令用于打印输出文本中匹配的模式串，它使用正则表达式作为模式匹配的条件。`grep`支持三种正则表达式引擎，分别用三个参数指定：

 

| 参数 | 说明                     |
| :--- | :----------------------- |
| `-E` | POSIX扩展正则表达式，ERE |
| `-G` | POSIX基本正则表达式，BRE |
| `-P` | Perl正则表达式，PCRE     |

  在通过`grep`命令使用正则表达式之前，先介绍一下它的常用参数：

 

| 参数           | 说明                                                         |
| :------------- | :----------------------------------------------------------- |
| `-b`           | 将二进制文件作为文本来进行匹配                               |
| `-c`           | 统计以模式匹配的数目                                         |
| `-i`           | 忽略大小写                                                   |
| `-n`           | 显示匹配文本所在行的行号                                     |
| `-v`           | 反选，输出不匹配行的内容                                     |
| `-r`           | 递归匹配查找                                                 |
| `-A n`         | n为正整数，表示after的意思，除了列出匹配行之外，还列出后面的n行 |
| `-B n`         | n为正整数，表示before的意思，除了列出匹配行之外，还列出前面的n行 |
| `--color=auto` | 将输出中的匹配项设置为自动颜色显示                           |

#### 正则表达式，BRE

 

- 位置

 将匹配以'z'开头以'o'结尾的所有字符串
$ echo 'zero\nzo\nzoo' | grep 'z.*o'

将匹配以'z'开头以'o'结尾，中间包含一个任意字符的字符串

$ echo 'zero\nzo\nzoo' | grep 'z.o'

将匹配以'z'开头,以任意多个'o'结尾的字符串

$ echo 'zero\nzo\nzoo' | grep 'zo*'

grep默认是区分大小写的，这里将匹配所有的小写字母
$ echo '1234\nabcd' | grep '[a-z]'

将匹配所有的数字

$ echo '1234\nabcd' | grep '[0-9]'

将匹配所有的数字

$ echo '1234\nabcd' | grep '[[:digit:]]'

将匹配所有的小写字母

$ echo '1234\nabcd' | grep '[[:lower:]]'

将匹配所有的大写字母

$ echo '1234\nabcd' | grep '[[:upper:]]'

将匹配所有的字母和数字，包括0-9,a-z,A-Z

$ echo '1234\nabcd' | grep '[[:alnum:]]'

将匹配所有的字母

$ echo '1234\nabcd' | grep '[[:alpha:]]'

 ![1559635136038](C:\Users\韩冬\AppData\Roaming\Typora\typora-user-images\1559635136038.png)

| 特殊符号     | 说明                                                         |
| :----------- | :----------------------------------------------------------- |
| `[:alnum:]`  | 代表英文大小写字母及数字，亦即 0-9, A-Z, a-z                 |
| `[:alpha:]`  | 代表任何英文大小写字母，亦即 A-Z, a-z                        |
| `[:blank:]`  | 代表空白键与 [Tab] 按键两者                                  |
| `[:cntrl:]`  | 代表键盘上面的控制按键，亦即包括 CR, LF, Tab, Del.. 等等     |
| `[:digit:]`  | 代表数字而已，亦即 0-9                                       |
| `[:graph:]`  | 除了空白字节 (空白键与 [Tab] 按键) 外的其他所有按键          |
| `[:lower:]`  | 代表小写字母，亦即 a-z                                       |
| `[:print:]`  | 代表任何可以被列印出来的字符                                 |
| `[:punct:]`  | 代表标点符号 (punctuation symbol)，亦即：" ' ? ! ; : # $...  |
| `[:upper:]`  | 代表大写字母，亦即 A-Z                                       |
| `[:space:]`  | 任何会产生空白的字符，包括空白键, [Tab], CR 等等             |
| `[:xdigit:]` | 代表 16 进位的数字类型，因此包括： 0-9, A-F, a-f 的数字与字节 |

**:**当`^`放到中括号内为排除字符，否则表示行首

#### 使用扩展正则表达式，ERE

要通过`grep`使用扩展正则表达式需要加上`-E`参数，或使用`egrep`

只匹配"zo"
$ echo 'zero\nzo\nzoo' | grep -E 'zo{1}'

匹配以"zo"开头的所有单词

$ echo 'zero\nzo\nzoo' | grep -E 'zo{1,}'

匹配"www.shiyanlou.com"和"www.google.com"

$ echo 'www.shiyanlou.com\nwww.baidu.com\nwww.google.com' | grep -E 'www\.(shiyanlou|google)\.com'

或者匹配不包含"baidu"的内容

$ echo 'www.shiyanlou.com\nwww.baidu.com\nwww.google.com' | grep -Ev 'www\.baidu\.com'

![1559636020866](C:\Users\韩冬\AppData\Roaming\Typora\typora-user-images\1559636020866.png)

、**sed 流编辑器**     

`ed`工具在 man 手册里面的全名为"sed - stream editor for filtering and transforming text
"，意即，用于过滤和转换文本的流编辑器

在 Linux/UNIX 的世界里敢称为编辑器的工具
